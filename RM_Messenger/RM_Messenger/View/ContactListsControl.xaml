<UserControl
  x:Class="RM_Messenger.View.ContactListsControl"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:converter="clr-namespace:RM_Messenger.Converters"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:local="clr-namespace:RM_Messenger.View"
  xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:model="clr-namespace:RM_Messenger.Model"
  d:DesignHeight="450"
  d:DesignWidth="800"
  mc:Ignorable="d">

  <UserControl.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Shadows.xaml" />
        <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
      </ResourceDictionary.MergedDictionaries>
      <converter:NameConverter x:Key="NameConverter" />

      <Style x:Key="RemoveListViewItemHighlight" TargetType="{x:Type ListViewItem}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ListViewItem}">
              <ContentPresenter />
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

    </ResourceDictionary>
  </UserControl.Resources>

  <StackPanel HorizontalAlignment="Stretch" Orientation="Vertical">
    <DockPanel HorizontalAlignment="Stretch" Background="#3E0C3A">
      <Button
        HorizontalAlignment="Left"
        Background="Transparent"
        BorderThickness="0"
        Command="{Binding AddFriendCommand}"
        Cursor="Hand"
        ToolTip="Add contact">
        <Image Height="20" Source="pack://application:,,,/RM_Messenger;component/Resources/AddFriend.png" />
      </Button>
      <Button
        HorizontalAlignment="Left"
        Background="Transparent"
        BorderThickness="0">
        <Image Height="20" Source="pack://application:,,,/RM_Messenger;component/Resources/GridIcon.png" />
      </Button>
      <TextBox
        Margin="0,1"
        Padding="5,0,5,0"
        HorizontalAlignment="Stretch"
        HorizontalContentAlignment="Left"
        VerticalContentAlignment="Center"
        Panel.ZIndex="0"
        Background="White"
        BorderBrush="LightGray"
        BorderThickness="1"
        FontFamily="SegoeUI"
        FontSize="12"
        Foreground="Black"
        Text="{Binding Status, ValidatesOnDataErrors=True, UpdateSourceTrigger=LostFocus}">

        <TextBox.Style>
          <Style xmlns:sys="clr-namespace:System;assembly=mscorlib" TargetType="TextBox">
            <Style.Resources>

              <VisualBrush
                x:Key="GrayHelperTextBrush"
                AlignmentX="Left"
                AlignmentY="Center"
                Stretch="None">
                <VisualBrush.Visual>
                  <Label
                    Name="SearchLabel"
                    BorderBrush="LightGray"
                    Content="Have something to share?"
                    FontFamily="SegoeUI"
                    FontSize="12"
                    Foreground="LightGray" />
                </VisualBrush.Visual>
              </VisualBrush>

              <VisualBrush
                x:Key="BlackHelperTextBrush"
                AlignmentX="Left"
                AlignmentY="Center"
                Stretch="None">
                <VisualBrush.Visual>
                  <Label
                    Name="SearchBlackLabel"
                    Content="Have something to share?"
                    FontFamily="SegoeUI"
                    FontSize="12"
                    Foreground="DeepSkyBlue" />
                </VisualBrush.Visual>
              </VisualBrush>

            </Style.Resources>
            <Style.Triggers>

              <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="Background" Value="White" />
              </Trigger>

              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="Text" Value="{x:Null}" />
                  <Condition Property="IsMouseOver" Value="False" />
                  <Condition Property="IsMouseCaptured" Value="False" />
                  <Condition Property="IsFocused" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                  <Setter Property="Background" Value="{StaticResource GrayHelperTextBrush}" />
                </MultiTrigger.Setters>
              </MultiTrigger>

              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="Text" Value="{x:Static sys:String.Empty}" />
                  <Condition Property="IsMouseOver" Value="False" />
                  <Condition Property="IsMouseCaptured" Value="False" />
                  <Condition Property="IsFocused" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                  <Setter Property="Background" Value="{StaticResource GrayHelperTextBrush}" />
                </MultiTrigger.Setters>
              </MultiTrigger>

              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="Text" Value="{x:Null}" />
                  <Condition Property="IsMouseOver" Value="True" />
                  <Condition Property="IsFocused" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                  <Setter Property="Background" Value="{StaticResource BlackHelperTextBrush}" />
                </MultiTrigger.Setters>
              </MultiTrigger>

              <MultiTrigger>
                <MultiTrigger.Conditions>
                  <Condition Property="Text" Value="{x:Static sys:String.Empty}" />
                  <Condition Property="IsMouseOver" Value="True" />
                  <Condition Property="IsFocused" Value="False" />
                </MultiTrigger.Conditions>
                <MultiTrigger.Setters>
                  <Setter Property="Background" Value="{StaticResource BlackHelperTextBrush}" />
                </MultiTrigger.Setters>
              </MultiTrigger>

            </Style.Triggers>
          </Style>
        </TextBox.Style>
      </TextBox>
    </DockPanel>

    <!--  list box  -->

    <ListView
      BorderThickness="0"
      ItemContainerStyle="{StaticResource RemoveListViewItemHighlight}"
      ItemsSource="{Binding ContactsLists}">
      <ListView.ItemTemplate>
        <DataTemplate DataType="{x:Type model:ContactListsModel}">
          <StackPanel Orientation="Vertical">
            <Expander
              x:Name="AddressBook"
              ExpandDirection="Right"
              FontWeight="Bold"
              Foreground="Indigo"
              IsExpanded="True">
              <Expander.Header>
                <StackPanel Orientation="Horizontal">
                  <Image
                    Name="img"
                    Width="auto"
                    Height="auto"
                    Source="{Binding ImagePath}" />
                  <TextBlock
                    Margin="7,0,0,0"
                    VerticalAlignment="Center"
                    Text="{Binding ListName}" />
                </StackPanel>
              </Expander.Header>
              <Expander.Resources>
                <SolidColorBrush x:Key="Expander.MouseOver.Circle.Stroke" Color="Transparent" />
                <SolidColorBrush x:Key="Expander.MouseOver.Circle.Fill" Color="Transparent" />
                <SolidColorBrush x:Key="Expander.MouseOver.Arrow.Stroke" Color="Gray" />
                <SolidColorBrush x:Key="Expander.Pressed.Circle.Stroke" Color="Transparent" />
                <SolidColorBrush x:Key="Expander.Pressed.Circle.Fill" Color="Transparent" />
                <SolidColorBrush x:Key="Expander.Pressed.Arrow.Stroke" Color="Gray" />
                <SolidColorBrush x:Key="Expander.Disabled.Circle.Stroke" Color="Transparent" />
                <SolidColorBrush x:Key="Expander.Disabled.Circle.Fill" Color="Transparent" />
                <SolidColorBrush x:Key="Expander.Disabled.Arrow.Stroke" Color="Gray" />
                <SolidColorBrush x:Key="Expander.Static.Circle.Fill" Color="Transparent" />
                <SolidColorBrush x:Key="Expander.Static.Circle.Stroke" Color="Transparent" />
                <SolidColorBrush x:Key="Expander.Static.Arrow.Stroke" Color="Gray" />
                <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Padding="{TemplateBinding Padding}">
                          <Grid Background="Transparent" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                              <ColumnDefinition Width="Auto" />
                              <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid>
                              <Grid.LayoutTransform>
                                <TransformGroup>
                                  <TransformGroup.Children>
                                    <TransformCollection>
                                      <RotateTransform Angle="-90" />
                                    </TransformCollection>
                                  </TransformGroup.Children>
                                </TransformGroup>
                              </Grid.LayoutTransform>
                              <Ellipse
                                x:Name="circle"
                                Width="19"
                                Height="19"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Fill="{StaticResource Expander.Static.Circle.Fill}"
                                Stroke="{StaticResource Expander.Static.Circle.Stroke}" />
                              <Path
                                x:Name="arrow"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="M -2,1.5 L -0.5,4 L 1,1.5 Z"
                                SnapsToDevicePixels="false"
                                Stroke="{StaticResource Expander.Static.Arrow.Stroke}"
                                StrokeThickness="3" />
                            </Grid>
                            <ContentPresenter
                              Grid.Column="1"
                              Margin="4,4,0,0"
                              HorizontalAlignment="Center"
                              VerticalAlignment="Center"
                              RecognizesAccessKey="True"
                              SnapsToDevicePixels="True" />
                          </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                          <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="arrow" Property="Data" Value="M -0.5,1.5 L -2.5,2.75 L -0.5, 4 Z" />
                          </Trigger>
                          <!--<Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="circle" Property="Stroke" Value="{StaticResource Expander.MouseOver.Circle.Stroke}" />
                            <Setter TargetName="circle" Property="Fill" Value="{StaticResource Expander.MouseOver.Circle.Fill}" />
                            <Setter TargetName="arrow" Property="Stroke" Value="{StaticResource Expander.MouseOver.Arrow.Stroke}" />
                          </Trigger>
                          <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="circle" Property="Stroke" Value="{StaticResource Expander.Pressed.Circle.Stroke}" />
                            <Setter TargetName="circle" Property="StrokeThickness" Value="1.5" />
                            <Setter TargetName="circle" Property="Fill" Value="{StaticResource Expander.Pressed.Circle.Fill}" />
                            <Setter TargetName="arrow" Property="Stroke" Value="{StaticResource Expander.Pressed.Arrow.Stroke}" />
                          </Trigger>
                          <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="circle" Property="Stroke" Value="{StaticResource Expander.Disabled.Circle.Stroke}" />
                            <Setter TargetName="circle" Property="Fill" Value="{StaticResource Expander.Disabled.Circle.Fill}" />
                            <Setter TargetName="arrow" Property="Stroke" Value="{StaticResource Expander.Disabled.Arrow.Stroke}" />
                          </Trigger>-->
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </Expander.Resources>

              <Expander.Template>
                <ControlTemplate TargetType="{x:Type Expander}">
                  <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="3"
                    SnapsToDevicePixels="true">
                    <Grid>
                      <Grid.RowDefinitions>
                        <RowDefinition />
                        <RowDefinition Height="*" />
                      </Grid.RowDefinitions>
                      <ToggleButton
                        x:Name="HeaderSite"
                        MinWidth="0"
                        MinHeight="0"
                        Margin="1"
                        Padding="{TemplateBinding Padding}"
                        HorizontalAlignment="Left"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Header}"
                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                        ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                        Cursor="Hand"
                        FontFamily="{TemplateBinding FontFamily}"
                        FontSize="{TemplateBinding FontSize}"
                        FontStretch="{TemplateBinding FontStretch}"
                        FontStyle="{TemplateBinding FontStyle}"
                        FontWeight="{TemplateBinding FontWeight}"
                        Foreground="{TemplateBinding Foreground}"
                        IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                        Style="{StaticResource ExpanderRightHeaderStyle}">
                        <ToggleButton.FocusVisualStyle>
                          <Style>
                            <Setter Property="Control.Template">
                              <Setter.Value>
                                <ControlTemplate>
                                  <Border>
                                    <Rectangle
                                      Margin="0"
                                      SnapsToDevicePixels="true"
                                      Stroke="Black"
                                      StrokeDashArray="1 2"
                                      StrokeThickness="1" />
                                  </Border>
                                </ControlTemplate>
                              </Setter.Value>
                            </Setter>
                          </Style>
                        </ToggleButton.FocusVisualStyle>
                      </ToggleButton>
                      <ContentPresenter
                        x:Name="ExpandSite"
                        Grid.Row="1"
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Focusable="false"
                        Visibility="Collapsed" />
                    </Grid>
                  </Border>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsExpanded" Value="true">
                      <Setter TargetName="ExpandSite" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="IsEnabled" Value="false">
                      <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </Expander.Template>

              <ListView
                MaxHeight="400"
                Margin="20,0,10,0"
                VerticalAlignment="Top"
                BorderThickness="0"
                Cursor="Hand"
                ItemsSource="{Binding ContactsList}"
                SelectedItem="{Binding SelectedContact}">

                <ListView.ItemTemplate>
                  <DataTemplate DataType="{x:Type model:DisplayedContactModel}">
                    <StackPanel Orientation="Horizontal">
                      <Image
                        Width="30"
                        Height="30"
                        Source="{Binding ImagePath}" />

                      <StackPanel Margin="5,0" Orientation="Horizontal">
                        <Image
                          Width="10"
                          Height="10"
                          Source="{Binding OnlineIcoPath}" />
                        <Label Content="{Binding Name}" FontSize="12" />
                      </StackPanel>
                    </StackPanel>
                  </DataTemplate>
                </ListView.ItemTemplate>
              </ListView>
            </Expander>
          </StackPanel>
        </DataTemplate>
      </ListView.ItemTemplate>
    </ListView>
  </StackPanel>
</UserControl>